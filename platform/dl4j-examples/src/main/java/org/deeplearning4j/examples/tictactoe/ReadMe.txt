Description of Generating Game Data (TicTacToeData.java)
-----------------------------------

1) Generate all possible game states. 
	- Following functions are involved in this process.
		- generatePossibleGames
		- generateStateBasedOnMoveNumber

	- Purpose of this function is to generate all possible board state for both odd and even move of the player.	
	- For first move, there are total 9 possible board states. i.e. player may start from first cell, second cell,....9th cell. 
	  Below are all possible 9 states represented in array form
		100000000
		010000000
		001000000
		000100000
		000010000
		000001000
		000000100
		000000010
		000000001
	- For second player, board state can be any of the above board states. i.e. he/she may get any board state to play. If he/she gets first board state, i.e. 100000000,
      then, he/she may mark in any of the 8 empty cells. So, for the first line (100000000), possible board state for the second player would be
		120000000	
		102000000
		100200000
		100020000
		100002000
		.
		.
		100000002
	   So, for first move from the first player (100000000), second player can play from total 8 empty cells. Similary, from total 9 possible board states, he/she may get
       total 9 * 8 = 72 possible states. That is why, there will be total 72 board states in second after second move.	   
		
		Below are some sample moves in second move
		- for second line in the first move, i.e. 010000000, possible states by second player
			210000000
			012000000
			010200000
			.
			.
			010000002
		- similarly, for the 9th line in first move, i.e. 000000001
			200000001
			020000001
			002000001
			.
			.
			000000021
	- Now, its again time for the first player to make his/her second move, i.e. its a third move for the game. 
		- For third move of the game, he/she may get total 72 different possible states depending on the move made in first and second player.
		- In third move, at any time there will be only 7 empty cells. So, there will be 72 * 7 = 504 possible board states for the first player to make third move.
		- Below are some sample moves.
			- If for third move, first player gets board state as 120000000, then he can make following 7 possible moves
				123000000
				120300000
				120030000
				120003000
				120000300
				120000030
				120000003
			- So, like 120000000 board state, we have total 72 possible states in second move which first player can have in the third move, hence 
              there will be total 72*7 = 504 possible board states in third move		
	- Now, its again time for the second player to play his/her second move, i.e. game's fourth move			
		- For fourth move of the game, he/she may get total 504 different possible games states depending on the third move made by first player.
		- In fourth move, at any time, there will be only 6 empty cells. So, there will be 504 * 6 = 3024 possible board states for the second player to make fourth move
		- Below are some sample moves
			- if for the fourth move, second player gets board state as 120000003 (which is last state in above example), then he/she can make following 6 possible moves
				124000003
				120400003
				120040003
				120004003
				120000403
				120000043
	.
	.
	.
	- Similarly, for the 8th move of the game, second player can get total 100224 * 2 = 200448 board states, here 100224 is possible board states generated by first playe making his move
	  if he doen't win in that move. Below is the possible state left by the first player in game's seventh move.
		  1,6,5,
		  3,2,7,
		  4,0,0
		- Here, only 8th and 9th cells are empty, so only two possibilities for the second player to play
		- It means that, out of all possible states (100224), second player can only make 2 possible moves, hence there will 100224 * 2 = 200448 possible moves for the second player to 
          make in his last move
	- Similarly, for the 9th move of the game (i.e. last move of the first player, he/she can get total (200488 * 1) - (state which are won by the second player in 8th move). 		
	- Please visit http://www.se16.info/hgb/tictactoe.htm URL to understand mathematics behind number of possible states in the game at each move for each player.

	- As functions mentioned above proceed further, they keep on populating winning states into oddPlayerWiningList and evenPlayerWiningList,
	- Above mentioned lists contain entries like given below. They are only winning entries in odd or even moves. After only fifth move any user can win or lose and not before that.
		- Entry 1,2,0,3,4,0,5,0,0 (first user won in fifth move)
			1,2,0 
			3,4,0
			5,0,0
		- Entry 1,2,0,3,4,0,0,6,5
			1,2,0
			3,4,0
			0,6,5
	- Here oddPlayerWiningList and evenPlayerWiningList lists will be expanded at the time of calculating probability.		
	
2) Calculate reward using "Temporal Difference" formula for reinforcement learning,
   
	Formula : probabilityOfPreviousState  = 0.5 + 0.1 * (probabilityOfCurrentState-0.5)
   
	- As we know that all winning states are stored in oddPlayerWiningList and evenPlayerWiningList. This list contain only
      board state for winning move and not all intermediate states.

	- Following functions does this job
		- rewardGameState - 
		- generateGameStatesAndRewardToIt
		- calculateReward 
	- This process involves following tasks
		- takes each entry from both oddPlayerWiningList and evenPlayerWiningList (which are winning entries only)
		- generates intermediate states 
		- allocates 1 to winning state
		- apply Temporal Difference formula for each intermediate move and calculate probality for each of them
		- It repeats this process for all entries in both oddPlayerWiningList and evenPlayerWiningList
		- Below is the explanation by example
			- Say winning state in oddPlayerWiningList is 1,2,0,3,4,0,5,0,0 then game is
				1,2,0
				3,4,0
				5,0,0
				
			- So, all intermediate steps will be
				1,0,0,0,0,0,0,0,0
				1,2,0,0,0,0,0,0,0
				1,2,0,3,0,0,0,0,0
				1,2,0,3,4,0,0,0,0
				1,2,0,3,4,0,5,0,0
				
				As we can see that, first user won in first move, by making 'O' in 1st, 3rd and 5th cells.
			- So, now first we will apply probability 1 to 5th step, and then apply Temporal Difference formula to all steps in reverse,
			  i.e. calculate TD for 5th step, 3rd step and 1st step. We don't here calculate probability for losing player.
			  
		- Example 
			Suppose Winning sequence is like:- 1.00, 2.00, 4.00, 3.00, 0.00, 0.00, 5.00, 0.00, 0.00 (i.e Max number is Odd)from this method will be reward as follow
			Which makes following game
				1,2,4,
				3,0,0,
				5,0,0
				
			i.e.
				O X X
				O 
				O 

			From winning state given above, we have following steps

				1,0,0,0,0,0,0,0,0 - calculated prob = 0.505
				1,2,0,0,0,0,0,0,0
				1,2,0,3,0,0,0,0,0 - calculated prob = 0.55 
				1,2,4,3,0,0,0,0,0
				1,2,4,3,0,0,5,0,0 - allocate 1 probality to this state as its winning state
			
				Formula : ProbabilityOfPreviousState  = 0.5 + 0.1 * (probabilityOfCurrentState - 0.5)
				
				We need to allocate probability to all steps involved in winning move, which are 1 and 3 also
				
				So, using probality 1 for last step (5th step), calculate probability for 3rd step 
				
				Formula : prob. of 3rd step = 0.5 + 0.1 * (prob. of 5th step - 0.5)
				          prob. of 3rd step = 0.5 + 0.1 * (1 - 0.5) = 0.55
			
				Now, calculate prob. of 1st step,
				
				Formula : prob. of 1st step = 0.5 + 0.1 * (prob. of 3rd step - 0.5)
				          prob. of 1st step = 0.5 + 0.1 * (0.55 - 0.5) = 0.505
				
				
				To losing game, we assign prob. 0.5 to all steps. These steps are updated during training when that step comes under winning game.
				
	- Finaly, we store all winning games into finalOutputArrayList and respective probality value in finalProbabilityValueList lists.

3) Write TicTacToe data into file that will be used into training
	
	- writeFinalData function will iterate through finalOutputArrayList and finalProbabilityValueList and write them into file
      that we can use during training.	
      